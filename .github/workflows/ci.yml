name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      docker:
        image: docker:24-dind
        options: --privileged
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json
    
    - name: Install Go dependencies
      run: |
        go mod download
        go mod verify
    
    - name: Install UI dependencies
      run: |
        cd ui
        npm ci --prefer-offline
        
    - name: Run Go tests with detailed output
      run: |
        mkdir -p test-results
        go test -v -race -coverprofile=coverage.out ./... 2>&1 | tee test-results/go-test.log
    
    - name: Run Go linting
      run: |
        # Install golangci-lint if not cached
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        golangci-lint run --timeout=5m --out-format=github-actions 2>&1 | tee test-results/golangci-lint.log
    
    - name: Build Go backend
      run: |
        mkdir -p bin
        go build -ldflags="-s -w" -o bin/console cmd/console/main.go 2>&1 | tee test-results/go-build.log
        go build -ldflags="-s -w" -o bin/gate cmd/gate/main.go 2>&1 | tee -a test-results/go-build.log
    
    - name: Build React frontend
      run: |
        cd ui
        npm run build 2>&1 | tee ../test-results/npm-build.log
    
    - name: Run frontend type check
      run: |
        cd ui
        npm run type-check 2>&1 | tee ../test-results/type-check.log
    
    - name: Upload test results and logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-and-logs-${{ github.run_number }}
        path: |
          test-results/
          coverage.out
          ~/.npm/_logs/
        retention-days: 30
        
    - name: Upload build artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ github.run_number }}
        path: |
          bin/
          ui/dist/
        retention-days: 7
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_VERSION=${{ github.sha }}
          BUILD_TIME=${{ github.run_number }}
    
    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
        subject-digest: ${{ steps.push.outputs.digest }}
        push-to-registry: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-images
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build-images]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop"
        # Add your staging deployment logic here
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build-images, security-scan]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create deployment artifact
      run: |
        mkdir -p deployment
        cp docker-compose.yml deployment/
        cp configs/production.yaml deployment/
        echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" > deployment/image-tag.txt
        tar -czf infra-core-deployment.tar.gz deployment/
    
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: infra-core-deployment.tar.gz
        retention-days: 30
    
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production environment"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        # Production deployment will be handled by the server deployment script

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build-images]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Build release binaries
      run: |
        # Build for multiple platforms
        mkdir -p release
        
        # Linux amd64
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ github.sha }}" -o release/infra-core-linux-amd64 cmd/console/main.go
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ github.sha }}" -o release/infra-core-gate-linux-amd64 cmd/gate/main.go
        
        # Linux arm64
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.version=${{ github.sha }}" -o release/infra-core-linux-arm64 cmd/console/main.go
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.version=${{ github.sha }}" -o release/infra-core-gate-linux-arm64 cmd/gate/main.go
        
        # Windows amd64
        GOOS=windows GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ github.sha }}" -o release/infra-core-windows-amd64.exe cmd/console/main.go
        GOOS=windows GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ github.sha }}" -o release/infra-core-gate-windows-amd64.exe cmd/gate/main.go
        
        # macOS amd64
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ github.sha }}" -o release/infra-core-darwin-amd64 cmd/console/main.go
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ github.sha }}" -o release/infra-core-gate-darwin-amd64 cmd/gate/main.go
        
        # macOS arm64 (Apple Silicon)
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w -X main.version=${{ github.sha }}" -o release/infra-core-darwin-arm64 cmd/console/main.go
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w -X main.version=${{ github.sha }}" -o release/infra-core-gate-darwin-arm64 cmd/gate/main.go
    
    - name: Build frontend
      run: |
        cd ui
        npm ci
        npm run build
        cd ..
        tar -czf release/infra-core-frontend.tar.gz -C ui/dist .
    
    - name: Package deployment scripts
      run: |
        tar -czf release/infra-core-deployment-scripts.tar.gz deploy.sh deploy.ps1 docker-compose.yml configs/
    
    - name: Generate changelog
      id: changelog
      run: |
        echo "## Changes in this release" > CHANGELOG.md
        git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 2>/dev/null || echo "")..HEAD >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## Docker Images" >> CHANGELOG.md
        echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}\`" >> CHANGELOG.md
        echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> CHANGELOG.md
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        files: |
          release/*
        generate_release_notes: true