name: Release Management

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch      # 0.1.0 -> 0.1.1
          - minor      # 0.1.0 -> 0.2.0
          - major      # 0.1.0 -> 1.0.0 (Ê≠£ÂºèÁâà)
          - prerelease # 0.1.0 -> 0.1.1-beta.0
          - beta       # 0.1.0-beta.0 -> 0.1.0-beta.1
          - alpha      # 0.1.0 -> 0.1.1-alpha.0

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Check coverage
        run: |
          coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Coverage: $coverage%"
          if (( $(echo "$coverage < 60" | bc -l) )); then
            echo "‚ùå Coverage $coverage% is below 60% threshold"
            exit 1
          else
            echo "‚úÖ Coverage $coverage% meets threshold"
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-no-fail -fmt sarif -out results.sarif ./...'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif

  build:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: [test, lint]
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build binaries
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          mkdir -p dist
          for cmd in cmd/*; do
            if [ -d "$cmd" ]; then
              binary_name=$(basename "$cmd")
              if [ "${{ matrix.os }}" = "windows" ]; then
                binary_name="${binary_name}.exe"
              fi
              echo "Building $binary_name for ${{ matrix.os }}/${{ matrix.arch }}"
              go build -ldflags="-s -w" -o "dist/${binary_name}-${{ matrix.os }}-${{ matrix.arch }}" "./$cmd"
            fi
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/

  # Âè™ÊúâÊâãÂä®Ëß¶ÂèëÊâç‰ºöÂàõÂª∫release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, lint, security, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install release tools
        run: npm install -g standard-version

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          for dir in dist/binaries-*/; do
            if [ -d "$dir" ]; then
              platform=$(basename "$dir" | sed 's/binaries-//')
              cd "$dir"
              tar -czf "../../release-assets/infra-core-${platform}.tar.gz" *
              cd ../..
            fi
          done

      - name: Create release
        id: release
        run: |
          case "${{ github.event.inputs.release_type }}" in
            "alpha")
              standard-version --prerelease alpha
              ;;
            "beta")
              standard-version --prerelease beta
              ;;
            "prerelease")
              standard-version --prerelease
              ;;
            "patch")
              standard-version --release-as patch
              ;;
            "minor")
              standard-version --release-as minor
              ;;
            "major")
              # ËøôÊòØ‰ªé0.x.xÂà∞1.0.0ÁöÑÈáçÂ§ßÁâàÊú¨ÂçáÁ∫ß
              standard-version --release-as major
              ;;
          esac
          
          version=$(git describe --tags --abbrev=0)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Push changes
        run: |
          git push --follow-tags origin main

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release.outputs.version }}
          name: Release ${{ steps.release.outputs.version }}
          body_path: CHANGELOG.md
          files: release-assets/*
          draft: false
          prerelease: ${{ contains(steps.release.outputs.version, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Ëá™Âä®ÂàõÂª∫ÂºÄÂèëÁâàÊú¨ (‰ªÖÈôêmainÂàÜÊîØpush)
  auto_prerelease:
    name: Auto Pre-release
    runs-on: ubuntu-latest
    needs: [test, lint, security, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && !contains(github.event.head_commit.message, 'chore(release)')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install release tools
        run: npm install -g standard-version

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Create auto pre-release
        id: auto_release
        run: |
          # Ëá™Âä®ÂàõÂª∫betaÈ¢ÑÂèëÂ∏ÉÁâàÊú¨
          standard-version --prerelease beta --skip.changelog --skip.commit --skip.tag
          version=$(cat VERSION)
          echo "version=v$version" >> $GITHUB_OUTPUT
          echo "Created auto pre-release: v$version"

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          for dir in dist/binaries-*/; do
            if [ -d "$dir" ]; then
              platform=$(basename "$dir" | sed 's/binaries-//')
              cd "$dir"
              tar -czf "../../release-assets/infra-core-${platform}.tar.gz" *
              cd ../..
            fi
          done

      - name: Create GitHub Pre-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.auto_release.outputs.version }}
          name: Pre-release ${{ steps.auto_release.outputs.version }}
          body: |
            üöÄ **Automated Pre-release**
            
            This is an automated pre-release build from the latest main branch.
            
            **Changes in this build:**
            - Latest commits from main branch
            - All tests passing ‚úÖ
            - Code quality checks passed ‚úÖ
            - Security scans completed ‚úÖ
            
            **‚ö†Ô∏è This is a pre-release version**
            - Use for testing and development only
            - May contain unstable features
            - Not recommended for production use
            
            For stable releases, see the [releases page](https://github.com/${{ github.repository }}/releases).
          files: release-assets/*
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [release, auto_prerelease]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Notify success
        if: needs.release.result == 'success' || needs.auto_prerelease.result == 'success'
        run: |
          if [ "${{ needs.release.result }}" == "success" ]; then
            echo "üéâ Manual release completed successfully!"
          elif [ "${{ needs.auto_prerelease.result }}" == "success" ]; then
            echo "üöÄ Auto pre-release completed successfully!"
          fi
          # Add Slack/Discord/Email notification here

      - name: Notify failure
        if: needs.release.result == 'failure' || needs.auto_prerelease.result == 'failure'
        run: |
          echo "‚ùå Release process failed!"
          # Add failure notification here